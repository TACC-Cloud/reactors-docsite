Attributes
==========

Every Reactor has the following attributes, built from either the Reactor's execution environment or by some clever mocking code when run in localized environments:

+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| name     | type                              | contents                                                                                                                                                     | source                                                                                                          |
+==========+===================================+==============================================================================================================================================================+=================================================================================================================+
| aliases  | ``aliases.store.AliasStore``      | A helper for managing App and Actor aliases                                                                                                                  | Configured on instantiation with current ``client``                                                             |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| client   | ``agavepy.agave.Agave``           | An active Agave API client                                                                                                                                   | Values provided by Abaco platform using ``agavepy.actors`` or local Agave API credentials.                      |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| context  | ``dict``                          | Variables passed by Abaco platform to the current execution                                                                                                  | Values passed by Abaco and materialized via ``agavepy.actors`` or generated by mocking support functions.       |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| execid   | ``string``                        | The current Abaco execution ID                                                                                                                               | ```context.execution_id``                                                                                       |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| local    | ``boolean``                       | ``True`` or ``False`` to indicate whether the function is running under Abaco or in a testing environment.                                                   | The `LOCALONLY` environment variable, which can be set in local testing configurations.                         |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| logger   | ```logging.StreamHandler```       | Pointer to the **screen** logger of ``loggers``                                                                                                              |                                                                                                                 |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| loggers  | ``dict``                          | Python loggers **screen**, which logs to both STDERR and (optionally) a structured log aggregator, and **slack** which can log directly to a Slack channel.  | Configured on instantiation, with credentials for Slack and other services provided by environment variables.   |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| nickname | ``string``                        | A semi-random, human memorable string. (e.g. sleek-lemur)                                                                                                    | A call to the `petname` library                                                                                 |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| pemagent | ``agaveutils.recursive.PemAgent`` | A helper for applying recursive Agave API files permissions. Calls to it will eventually be an asynchronous.                                                 | Configured on instantiation with current ``client``                                                             |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| session  | ``string``                        | A correlation key for connecting related events.                                                                                                             | Query parameters ``SESSION`` or ``x-session``, then ``nickname``                                                |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| settings | ``attrdict.AttrDict``             | Contents of ``config.yml``, where keys are accessible in ``dot.notation``.                                                                                   | Populated at instantiation from ``config.yml`` via ``tacconfig.load_settings()``                                |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| state    | ``dict``                          | The current Abaco actor **state** variable                                                                                                                   | ``context.state``                                                                                               |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| uid      | ``string``                        | The current Abaco actor ID                                                                                                                                   | ```context.actor_id``                                                                                           |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+
| username | ``string``                        | TACC.cloud username on whose behalf the actor's current execution is being undertaken.                                                                       | Provided by ```context.username`` under Abaco or by inspecting ``client`` when running locally.                 |
+----------+-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------+

aliases
-------

This is an instance of ``AliasStore`` with which one can create, get, remove, and share alias entries for any actor. See AliasStore documentation for details.

Example
^^^^^^^

.. code-block:: pycon
   :caption: Get an alias

    >>> r = Reactor()
    >>> id = r.aliases.get('slackbot')
    >>> print(id)
    GGPg6KqVrqPl6

.. code-block:: pycon
   :caption: Use the 'me' built-in

    >>> r = Reactor()
    >>> print(r.uid)
    e50Yz5jaBA4Eo
    >>> id = r.aliases.get('me')
    >>> print(id)
    e50Yz5jaBA4Eo

client
------

This is an active AgavePy API which is used to make authenticated API calls on behalf of the user that invoked execution of the Reactor. All AgavePy functions are supported.

Example
^^^^^^^

.. code-block:: pycon
   :caption: List available public apps

    >>> r = Reactor()
    >>> apps = r.client.apps.list(publicOnly=True)
    >>> type(apps)
    <type 'list'>
    >>> for a in apps:
    >>>    print(a.name)
    psap-0.1.0u1
    xplan-0.1.0u1
    lcms-pyquant-0.1.1u1
    ...

context
-------

This is a dictionary populated from environment variables passed to the container by Abaco.

.. code-block:: pycon
   :caption: An example context

    >>> r = Reactor()
    >>> print(r.context)
    AttrDict({'HOSTNAME': '4647e1acfe46', 'LOCALONLY': '1', '_REACTOR_TEMP': '/mnt/ephemeral-01', 'raw_message_parse_log': 'Error parsing message: malformed node or string: None', 'message_dict': {}, 'SCRATCH': '/mnt/ephemeral-01', 'REACTORS_VERSION': '0.7.5', '_': '/usr/bin/python3', 'SHLVL': '1', 'PWD': '/', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'TERM': 'xterm', 'HOME': '/root', '_PROJ_STOCKYARD': '/work/projects/', 'PATH': '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'OLDPWD': '/mnt/ephemeral-01', 'MSG': 'Hello There', _USER_WORK': '', '_PROJ_CORRAL': '/corral', 'actor_dbid': '5GJbZRQYk0VmY', 'username': 'tacocat', 'actor_id': '5GJbZRQYk0VmY', 'state': {}, 'execution_id': 'DeAzrr6ABO1pr', 'raw_message': 'Hello There', 'content_type': 'application/json'})
    >>> print(r.context.raw_message)
    Hello There

Context combines environment variables inherited from the container image, set in the container's worker by Abaco, and passed to the specific execution by Abaco into a single dictionary. In addition to the string value keys, there are two important `dict` objects: **state** and **message_dict**

 - **state** is a ``dict`` that can be read from and modified to pass information between executions of an actor without relying on an external database.

 - **message_dict** is populated by parsing a JSON message passed to the actor into a Python dictionary. This is done automatically and safely via Pythons `ast` and `json.loads` functions. If a message can't be parsed, message_dict is set to an empty ``AttrDict``. If you believe you're sending valid JSON but it's not resolving as a dictionary, ``context.raw_message_parse_log`` can be inspected for clues to what is causing the failure.


execid
------

local
-----

logger
------

loggers
-------

nickname
--------

pemagent
--------

session
-------

settings
--------

state
-----

uid
---

username
--------
